import * as vscode from "vscode";

export interface CodeReference {
  filePath: string;
  range: {
    start: { line: number; character: number };
    end: { line: number; character: number };
  };
  // Optional: for more precise linking, e.g., function name, variable name
  identifier?: string;
}

export interface FlowNode {
  id: string; // Unique ID for the node (e.g., generated by uuid)
  label: string; // Text to display (e.g., function name, event, condition)
  type:
    | "Function"
    | "Event"
    | "Condition"
    | "Loop"
    | "EntryPoint"
    | "ExitPoint"
    | "Note"
    | "ManualStep";
  codeReference?: CodeReference; // Link to the source code
  properties?: Record<string, any>; // Additional properties for styling or data
  description?: string; // Detailed description of this node
}

export interface FlowEdge {
  id: string; // Unique ID for the edge
  from: string; // ID of the source FlowNode
  to: string; // ID of the target FlowNode
  label?: string; // Optional text for the edge (e.g., condition, data passed)
  type?: "DirectCall" | "ConditionalTrue" | "ConditionalFalse" | "AsyncCallback" | "DataFlow";
  properties?: Record<string, any>;
}

export interface CapturedFlow {
  id: string; // Unique ID for the entire flow
  name: string;
  description: string;
  category?:
    | "General"
    | "User Interaction"
    | "Data Processing"
    | "API Call"
    | "Authentication"
    | "Needs Review";
  tags?: string[]; // For more granular categorization, e.g., ["critical", "refactor-needed"]
  createdAt: string; // ISO date string
  updatedAt: string; // ISO date string
  author?: string;
  startPin?: CodeReference;
  endPin?: CodeReference;
  nodes: FlowNode[];
  edges: FlowEdge[];
  // For mermaid or other graphing libraries, this could be pre-generated or generated on demand
  mermaidGraph?: string;
}

export interface ProjectFlows {
  version: string; // To handle future schema changes
  flows: CapturedFlow[];
}

// Message types for communication between extension and webview
export interface WebviewToExtensionMessage {
  command: string;
  payload?: any;
}

export interface ExtensionToWebviewMessage {
  command: string;
  payload?: any;
}

export const MOCK_FLOW_ID = "mockFlowId123";
